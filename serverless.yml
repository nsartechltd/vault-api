service: nsartech-vault-api

plugins:
  - serverless-plugin-typescript
  - serverless-offline

provider:
  name: aws
  runtime: nodejs14.x
  region: ${opt:region, 'eu-west-2'}
  stage: ${opt:stage, 'dev'}
  lambdaHashingVersion: 20201221
  environment:
    ENVIRONMENT: ${self:provider.stage}
    NODE_ENV: ${self:custom.nodeEnv.${self:provider.stage}}
    TRUE_LAYER_API_URL: ${ssm:/vault/TRUE_LAYER_API_URL}
    TRUE_LAYER_CLIENT_ID: ${ssm:/vault/TRUE_LAYER_CLIENT_ID~true}
    TRUE_LAYER_CLIENT_SECRET: ${ssm:/vault/TRUE_LAYER_CLIENT_SECRET~true}
    TRUE_LAYER_REDIRECT_URL: ${ssm:/vault/TRUE_LAYER_REDIRECT_URL}
    DB_HOST: ${ssm:/vault/rds/DB_HOST}
    DB_USERNAME: ${ssm:/vault/rds/DB_USERNAME}
    DB_PASSWORD: ${ssm:/vault/rds/DB_PASSWORD~true}
    DB_DATABASE: ${ssm:/vault/rds/DB_DATABASE}
  vpc:
    securityGroupIds:
      - ${ssm:/backend/SECURITY_GROUP_ID}
    subnetIds: ${ssm:/backend/PRIVATE_SUBNET_IDS~split}

custom:
  serverless-offline:
    host: 0.0.0.0
    httpPort: 3001
  nodeEnv:
    dev: development
    prod: production

functions:
  trueLayerCallback:
    handler: src/functions/trueLayer.authCallback
    events:
      - http:
          path: /api/authCallback
          method: get
  getProviders:
    handler: src/functions/provider.getProviders
    events:
      - http:
          path: /api/providers
          method: get
  getUserProviders:
    handler: src/functions/provider.getUserProviders
    events:
      - http:
          path: /api/user/{userId}/providers
          method: get