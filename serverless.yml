service: nsartech-vault-api

plugins:
  - serverless-plugin-typescript
  - serverless-domain-manager
  - serverless-offline

provider:
  name: aws
  runtime: nodejs14.x
  region: ${opt:region, 'eu-west-2'}
  stage: ${opt:stage, 'dev'}
  lambdaHashingVersion: 20201221
  environment:
    ENVIRONMENT: ${self:provider.stage}
    NODE_ENV: ${self:custom.nodeEnv.${self:provider.stage}}
    TRUE_LAYER_API_URL: ${ssm:/vault/TRUE_LAYER_API_URL}
    TRUE_LAYER_AUTH_URL: ${ssm:/vault/TRUE_LAYER_AUTH_URL}
    TRUE_LAYER_CLIENT_ID: ${ssm:/vault/TRUE_LAYER_CLIENT_ID~true}
    TRUE_LAYER_CLIENT_SECRET: ${ssm:/vault/TRUE_LAYER_CLIENT_SECRET~true}
    TRUE_LAYER_REDIRECT_URL: ${ssm:/vault/TRUE_LAYER_REDIRECT_URL}
    DB_HOST: ${ssm:/vault/rds/DB_HOST}
    DB_USERNAME: ${ssm:/vault/rds/DB_USERNAME}
    DB_PASSWORD: ${ssm:/vault/rds/DB_PASSWORD~true}
    DB_DATABASE: ${ssm:/vault/rds/DB_DATABASE}
    VAULT_UI_URL: ${ssm:/vault/ui/url}
  vpc:
    securityGroupIds:
      - ${ssm:/vault/SECURITY_GROUP_ID}
    subnetIds: ${ssm:/vault/PRIVATE_SUBNET_IDS~split}

custom:
  serverless-offline:
    host: 0.0.0.0
    httpPort: 3001
  domain: vault-api${self:custom.stageDomainPrefix.${self:provider.stage}}.nsar-tech.co.uk
  nodeEnv:
    dev: development
    prod: production
  stageDomainPrefix:
    dev: "-dev"
    prod: ""
  customDomain:
    rest:
      domainName: ${self:custom.domain}
      createRoute53Record: false # managed by terraform in the root account
      endpointType: "regional"
      certificateArn: ${ssm:/nsar-tech/CERTIFICATE_ARN}
      autoDomain: true
      autoDomainWaitFor: 120

functions:
  trueLayerCallback:
    handler: src/functions/trueLayer.authCallback
    timeout: 10
    events:
      - http:
          path: /api/authCallback
          method: get
  authenticateProvider:
    handler: src/functions/provider.authProvider
    events:
      - http:
          path: /api/provider/authenticate
          method: post
  getProviders:
    handler: src/functions/provider.getProviders
    events:
      - http:
          path: /api/providers
          method: get
  getUserProviders:
    handler: src/functions/provider.getUserProviders
    events:
      - http:
          path: /api/user/{userId}/providers
          method: get
  getUserProviderAccounts:
    handler: src/functions/provider.getUserProviderAccounts
    events:
      - http:
          path: /api/user/{userId}/provider/{providerId}/accounts
          method: get
  getUserProviderAccountBalance:
    handler: src/functions/provider.getUserProviderAccountBalance
    events:
      - http:
          path: /api/user/{userId}/provider/{providerId}/account/{accountId}/balance
          method: get
  getUserProviderAccountTransactions:
    handler: src/functions/provider.getUserProviderAccountTransactions
    events:
      - http:
          path: /api/user/{userId}/provider/{providerId}/account/{accountId}/transactions
          method: get

  # Cognito
  storeCognitoUserData:
    handler: src/functions/cognito.storeUser
    events:
      - cognitoUserPool:
          pool: vault-${self:provider.stage}-user-pool
          trigger: PostConfirmation
          existing: true